using System;
using System.Collections.Generic;
using System.Configuration;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace ZXVersion
{
    class Program
    {
        private static string File;
        private static string Dir;
        private static string DateFormat;
        private static string TimeFormat;
        private static string TimeFormatSecs;
        private static bool UpperCase = false;
        private static int Version = 0;
        private static bool IncludeWidths = false;
        private static bool IncludeMacros = false;

        static void Main(string[] args)
        {
            try
            {
                var now = DateTime.Now;

                // Create file and directory
                File = (ConfigurationManager.AppSettings["OutputFile"] ?? "").Trim();
                if (string.IsNullOrEmpty(File)) File = "version.asm";
                Dir = Path.GetDirectoryName(File);
                if (!string.IsNullOrEmpty(Dir) && !Directory.Exists(Dir))
                    Directory.CreateDirectory(Dir);

                // Set formats
                DateFormat = (ConfigurationManager.AppSettings["DateFormat"] ?? "");
                if (string.IsNullOrEmpty(DateFormat)) DateFormat = "dd MMM yyyy";
                TimeFormat = (ConfigurationManager.AppSettings["TimeFormat"] ?? "");
                if (string.IsNullOrEmpty(TimeFormat)) TimeFormat = "HH:mm";
                TimeFormatSecs = (ConfigurationManager.AppSettings["TimeFormatSecs"] ?? "");
                if (string.IsNullOrEmpty(TimeFormat)) TimeFormatSecs = "HH:mm:ss";
                string uc = (ConfigurationManager.AppSettings["UpperCase"] ?? "false");
                bool.TryParse(uc, out UpperCase);
                IncludeWidths = (ConfigurationManager.AppSettings["IncludeWidths"] ?? "").Trim().ToLower() == "true";
                IncludeMacros = (ConfigurationManager.AppSettings["IncludeMacros"] ?? "").Trim().ToLower() == "true";

                // Get git version
                try
                {
                    var p = new Process();
                    p.StartInfo.FileName = "git.exe";
                    p.StartInfo.UseShellExecute = false;
                    p.StartInfo.RedirectStandardOutput = true;
                    p.StartInfo.Arguments = "rev-list --count HEAD";
                    p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
                    p.Start();
                    string output = p.StandardOutput.ReadToEnd();
                    p.WaitForExit();
                    output = output.Replace("\r", "").Replace("\n", "");
                    int.TryParse(output, out Version);
                }
                catch
                {
                    Version = 0;
                }

                // Create file
                var sb = new StringBuilder();
                sb.AppendLine("; version.asm");
                sb.AppendLine(";");
                sb.AppendLine("; Auto-generated by ZXVersion.exe");
                sb.Append("; On ");
                sb.Append(Upper(now.ToString(DateFormat)));
                sb.Append(" at ");
                sb.AppendLine(Upper(now.ToString(TimeFormat)));
                sb.AppendLine();
                if (IncludeMacros)
                {
                    sb.AppendLine("BuildNo                 macro()");
                    sb.Append("                        db \"");
                    sb.Append(Version.ToString());
                    sb.AppendLine("\"");
                    sb.AppendLine("mend");
                    sb.AppendLine();
                }
                sb.Append("BuildNoValue            equ \"");
                sb.Append(Version.ToString());
                sb.AppendLine("\"");
                if (IncludeWidths)
                {
                    sb.Append("BuildNoWidth            equ 0");
                    foreach (var chr in Version.ToString())
                        sb.Append(" + FW" + chr.ToString());
                    sb.AppendLine();
                }
                sb.AppendLine();
                sb.AppendLine();
                sb.AppendLine();
                if (IncludeMacros)
                {
                    sb.AppendLine("BuildDate               macro()");
                    sb.Append("                        db \"");
                    sb.Append(Upper(now.ToString(DateFormat)));
                    sb.AppendLine("\"");
                    sb.AppendLine("mend");
                    sb.AppendLine();
                }
                sb.Append("BuildDateValue          equ \"");
                sb.Append(Upper(now.ToString(DateFormat)));
                sb.AppendLine("\"");
                if (IncludeWidths)
                {
                    sb.Append("BuildDateWidth          equ 0");
                    foreach (var chr in Upper(now.ToString(DateFormat)))
                        sb.Append(" + FW" + Name(chr.ToString()));
                    sb.AppendLine();
                }
                sb.AppendLine();
                sb.AppendLine();
                sb.AppendLine();
                if (IncludeMacros)
                {
                    sb.AppendLine("BuildTime               macro()");
                    sb.Append("                        db \"");
                    sb.Append(Upper(now.ToString(TimeFormat)));
                    sb.AppendLine("\"");
                    sb.AppendLine("mend");
                    sb.AppendLine();
                }
                sb.Append("BuildTimeValue          equ \"");
                sb.Append(Upper(now.ToString(TimeFormat)));
                sb.AppendLine("\"");
                if (IncludeWidths)
                {
                    sb.Append("BuildTimeWidth          equ 0");
                    foreach (var chr in Upper(now.ToString(TimeFormat)))
                        sb.Append(" + FW" + Name(chr.ToString()));
                    sb.AppendLine();
                }
                sb.AppendLine();
                sb.AppendLine();
                sb.AppendLine();
                if (IncludeMacros)
                {
                    sb.AppendLine("BuildTimeSecs           macro()");
                    sb.Append("                        db \"");
                    sb.Append(Upper(now.ToString(TimeFormatSecs)));
                    sb.AppendLine("\"");
                    sb.AppendLine("mend");
                    sb.AppendLine();
                }
                sb.Append("BuildTimeSecsValue      equ \"");
                sb.Append(Upper(now.ToString(TimeFormatSecs)));
                sb.AppendLine("\"");
                if (IncludeWidths)
                {
                    sb.Append("BuildTimeSecsWidth      equ 0");
                    foreach (var chr in Upper(now.ToString(TimeFormatSecs)))
                        sb.Append(" + FW" + Name(chr.ToString()));
                    sb.AppendLine();
                }

                // Write file
                System.IO.File.WriteAllText(File, sb.ToString());
            }
            catch (Exception ex)
            {
                Console.Write(ex.Message);
                Console.Write(ex.StackTrace);
            }
        }

        private static string Upper(string Text)
        {
            if (UpperCase) return (Text ?? "").ToUpper();
            else return (Text ?? "");
        }

        private static string Name(string Value)
        {
            if (string.IsNullOrEmpty(Value)) return "Null";
            if (Value == " ") return "Space";
            else if (Value == ":") return "Colon";
            else if (Value == "-") return "Dash";
            else if (Value == ".") return "Period";
            else return Value;
        }
    }
}
